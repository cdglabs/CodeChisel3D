ace.define("ace/snippets/javascript",["require","exports","module"], function(require, exports, module) {
"use strict";

exports.snippetText = "# Prototype\nsnippet proto\n\t${1:class}.prototype.${2:method} = function(${3:arg}) {\n\t\t${4:// body...}\n\t};\n# Function\nsnippet fun\n\tfunction ${1?:functionName}(${2}) {${0}}\n# Anonymous Function\nregex /((=)\\s*|(:)\\s*|(\\()|\\b)/f/\nname f\n\tfunction($2) {${0:$TM_SELECTED_TEXT}}${M2?;}${M3?,}\n# Anonymous Function\nregex /((=)\\s*|(:)\\s*|(\\()|\\b)/f2/(\\))?/\nname f2\n\tfunction${M1?: ${1:functionName}}($2) {${0:$TM_SELECTED_TEXT}}${M2?;}${M3?,}${M4?)}\n# Immediate function\ntrigger \\(?f\\(\nendTrigger \\)?\nsnippet f(\n\t(function ${1:functionName}(${2}) {\n\t\t${0:${TM_SELECTED_TEXT:/* code */}}\n\t})(${2});\n# if\nsnippet if\n\tif (${1:true}) {\n\t\t${0}\n\t}\n# if ... else\nsnippet ife\n\tif (${1:true}) {\n\t\t${2}\n\t} else {\n\t\t${0}\n\t}\nsnippet err\n\tif (${1:err}) { ${2:thenDo}(err, null); return; }\n# tertiary conditional\nsnippet ter\n\t${1:/* condition */} ? ${2:a} : ${3:b}\n# switch\nsnippet switch\n\tswitch (${1:expression}) {\n\t\tcase '${3:case}':\n\t\t\t${4:// code}\n\t\t\tbreak;\n\t\t${5}\n\t\tdefault:\n\t\t\t${2:// code}\n\t}\n# case\nsnippet case\n\tcase '${1:case}':\n\t\t${2:// code}\n\t\tbreak;\n\t${3}\n\n# while (...) {...}\nsnippet wh\n\twhile (${1:/* condition */}) {${0:/* code */}}\n# try\nsnippet try\n\ttry {${0:/* code */}} catch (e) {}\n# do...while\nsnippet do\n\tdo {${2:/* code */}} while (${1:/* condition */});\n# Object Method\nsnippet :f\nregex /([,{[])|^\\s*/:f/\n\t${1:methodName}: function(${2:attribute}) {${0}}${3:,}\n# Object Property\nsnippet :p\nregex /([,{[])|^\\s*/:p/\n\t${1:propName}: ${0:value,}\n# setTimeout function\nsnippet setTimeout\nregex /\\b/st|timeout|setTimeo?u?t?/\n\tsetTimeout(function() {${0:$TM_SELECTED_TEXT}}, ${1:100});\nsnippet setInterval\nregex /\\b/int|setI?n?t?e?r?v?a?l?/\n\tvar i = setInterval(function() {${0:$TM_SELECTED_TEXT}}, ${1:1000});\n\tclearInterval(i);\n# delay function\nsnippet delay\nregex /\\b/st|del(ay)?/\n\t(function() {${0}})${2:.bind(this)}.delay(${1:0});\n# Get Elements\nsnippet gett\n\tgetElementsBy${1:TagName}('${2}')${3}\n# Get Element\nsnippet get\n\tgetElementBy${1:Id}('${2}')${3}\n# console.log (Firebug)\nsnippet cl\n\tconsole.log(${1});\n# show (lively)\nsnippet s\n\tshow(\"${1:%o}\", ${2});\n# session snippet\nsnippet getS\n\tvar s = lively.net.SessionTracker.getSession();\n# return\nsnippet ret\n\treturn ${1:result};\n# for (property in object ) { ... }\nsnippet fori\n\tfor (var ${1:prop} in ${2:Things}) {\n\t\t${0:$2[$1]}\n\t}\n# hasOwnProperty\nsnippet has\n\thasOwnProperty(${1})\n# printit comment\nsnippet />\n\t// => \n# block comment\nsnippet /*\n\t/*\n\t * ${1:description}\n\t */\n# docstring\nsnippet /**\n\t/**\n\t * ${1:description}\n\t *\n\t */\nsnippet @par\nregex /^\\s*\\*\\s*/@(para?m?)?/\n\t@param {${1:type}} ${2:name} ${3:description}\nsnippet @ret\n\t@return {${1:type}} ${2:description}\n# JSON.parse\nsnippet jsonp\n\tJSON.parse(${1:jstr});\n# JSON.stringify\nsnippet jsons\n\tJSON.stringify(${1:object});\n# self-defining function\nsnippet sdf\n\tvar ${1:function_name} = function(${2:argument}) {\n\t\t${3:// initial code ...}\n\t\t$1 = function($2) {${4:// main code}};\n\t}\n# class\nname subclass\nregex /^\\s*([^\\.]+)?/\\.?(sub)?class/\n\t${M1?:${1:Object}}.subclass(\"${2:Name}\",\n\t\"initializing\", {\n\t\tinitialize: function(${3})  {\n\t\t\t${0}\n\t\t}\n\t});\n# TestClass\nname TestClass\nregex /^\\s*/TestCl?a?s?s?/\n\tTestCase.subclass(\"${1:TestClass}\",\n\t\"running\", {\n\t\tsetUp: function($super)  {},\n\t\ttearDown: function($super)  {}\n\t},\n\t'testing', {\n\t\t${2:test1}: function() {${0}}\n\t});\n# initialize methods\nsnippet init\n\tinitialize: function(${1}) {${0}}\n# initialize category\nsnippet initCat\n\t'initializing', {\n\t\tinitialize: function(${1}) {${0}}\n\t}\n# category\nsnippet cat\n\t'${1:category name}', {${0}}${2:,}\n# addMethods\nname addMethods\nregex /^\\s*([^\\.]+)?/\\.?addMe?t?h?o?d?s?/\n\t${M1?:${1:SomeClass}}.addMethods(\n\t\"${2:category}\", {\n\t\t${0}\n\t});\n# Object.extend\nsnippet Oe\n\tObject.extend(${1:obj}, {$0});\n# collection iter\nregex /(\\.?[^\\.\\s]+)/\\.?((iter|forEa?c?h?)|(select|collect|reject|detect|map|filter))/\n\t${M1?:${1:list}}.${M4?${M4}:${2:forEach}}(function(${3:ea}) {$0});\n# collection inject\nregex /(\\.?[^\\.\\s]+|^\\s*)/\\.?inje?c?t?/\n\t${M1?:${1:list}}.inject(${2:collector}, function($2, ea) { ${0:return $2;} });\n# collection withAllSubmorphsDo\nregex /(\\.?[^\\.\\s]+|^\\s*)/\\.?withAl?l?S?u?b?m?o?r?p?h?s?D?o?/\n\t${M1?:${1:owner}}.withAllSubmorphsDo(function(ea) { return ${0:ea}; });\n# addScript\nregex /(\\.?[^\\.\\s]+|^\\s*)/\\.?addSc?r?i?p?t?/\n\t${M1?:${1:morph}}.addScript(function ${2:scriptName}(${3}) {${0}});\n# lively.bindings.connect\nsnippet con\n\tlively.bindings.connect(${1:source}, '${2:sourceAttr}', ${3:target}, '${4:targetAttr}');\n# lively.bindings.connect converter\nsnippet conC\n\tlively.bindings.connect(${1:source}, '${2:sourceAttr}', ${3:target}, '${4:targetAttr}', {\n\t\tconverter: function(val) { ${0:return val;} }});\n# lively.bindings.connect updater\nsnippet conU\n\tlively.bindings.connect(${1:source}, '${2:sourceAttr}', ${3:target}, '${4:targetAttr}', {\n\t\tupdater: function(\\$upd, val) { ${0:\\$upd(val);} }});\n# lively.bindings.signal\nsnippet sig\n\tlively.bindings.signal(${1:source}, '${2:sourceAttr}', ${3:value});\n# lively meta - grep\nsnippet $g\n\t\\$grep('${1:string}', '${0:location}')\n# lively world\nsnippet $w\n\t\\$world\n# $morph\nsnippet $m\n\t\\$morph('${1:name}')${0}\n# \nsnippet for-\n\tfor (var ${1:i} = ${2:THINGS}.length; ${1:i}--; ) {\n\t\t${0:${2:THINGS}[${1:i}];}\n\t}\n# for (...) {...}\nsnippet for\n\tfor (var ${1:i} = 0; $1 < ${2:Things}.length; $1++) {\n\t\t${3:$2[$1]}$0\n\t}\n# for (...) {...} (Improved Native For-Loop)\nsnippet forr\n\tfor (var ${1:i} = ${2:Things}.length - 1; $1 >= 0; $1--) {\n\t\t${3:$2[$1]}$0\n\t}\n#modules\nsnippet def\n\tdefine(function(require, exports, module) {\n\t\"use strict\";\n\tvar ${1/.*\\///} = require(\"${1}\");\n\t\n\t$TM_SELECTED_TEXT\n\t});\nsnippet req\nguard ^\\s*\n\tvar ${1/.*\\///} = require(\"${1}\");\n\t$0\nsnippet requ\nguard ^\\s*\n\tvar ${1/.*\\/(.)/\\u$1/} = require(\"${1}\").${1/.*\\/(.)/\\u$1/};\n\t$0\n# Functions.composeAsync\nsnippet async\n\tFunctions.composeAsync(\n\t\tfunction(${1}next) { ${0:next(null);} }\n\t)(${1}function(err) { if (err) show(err); });\n# typeof tests\nsnippet typef\n\ttypeof ${1:object} === \"function\"${0}\nsnippet typeu\n\ttypeof ${1:object} === \"undefined\"${0}\nsnippet typenu\n\ttypeof ${1:object} !== \"undefined\"${0}\n# $world snippets\nsnippet prompt\n\t\\$world.prompt(\"${1:query text}\", function(input) {\n\t\tif (!input) return;\n\t\t${0}\n\t}, {input: \"${2:initial input}\", historyId: \"${3:prompt-id}\"});\nsnippet confirm\n\t\\$world.confirm(\"${1:query text}\", function(input) {\n\t\tif (!input) return;\n\t\t${0}\n\t});\n"
exports.scope = "javascript";

});
